{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2d9ac163",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: plotly in c:\\users\\houst\\anaconda3\\lib\\site-packages (5.9.0)\n",
      "Requirement already satisfied: tenacity>=6.2.0 in c:\\users\\houst\\anaconda3\\lib\\site-packages (from plotly) (8.2.2)\n",
      "Note: you may need to restart the kernel to use updated packages.\n",
      "Requirement already satisfied: wget in c:\\users\\houst\\anaconda3\\lib\\site-packages (3.2)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "#Running all console commands for install\n",
    "%pip install dash\n",
    "%pip install plotly\n",
    "%pip install wget"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a655561d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing all the packages needed\n",
    "import dash\n",
    "from dash import dcc, html, callback, Output, Input\n",
    "import plotly.express as px\n",
    "import plotly.graph_objs as go\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import requests\n",
    "import io"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b81cf508",
   "metadata": {},
   "outputs": [],
   "source": [
    "#import the data\n",
    "URL = \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/historical_automobile_sales.csv\"\n",
    "response = requests.get(URL)\n",
    "data = pd.read_csv(URL)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e98b499b",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8090/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x1f389af8910>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "app = dash.Dash(__name__)\n",
    "\n",
    "year_list = [i for i in range(1980, 2024)]\n",
    "\n",
    "#making the layout for the dashboard\n",
    "app.layout = html.Div([\n",
    "    html.H1(\n",
    "        children='Automobile Sales Statistics Dashboard',\n",
    "        style={\n",
    "            'textAlign': 'center',\n",
    "            'color': '#503D36',\n",
    "            'fontSize': '24px'\n",
    "        }\n",
    "    ),\n",
    "    \n",
    "    \n",
    "    #making the dropdown box for report type\n",
    "    dcc.Dropdown(\n",
    "        id='dropdown-statistics',\n",
    "        options=[\n",
    "            {'label': 'Yearly Statistics', 'value': 'Yearly Statistics'},\n",
    "            {'label': 'Recession Period Statistics', 'value': 'Recession Period Statistics'}\n",
    "        ],\n",
    "        placeholder='Select a report type',\n",
    "        value='Select Statistics',\n",
    "        style={\n",
    "            'width': '80%',\n",
    "            'padding': '3px',\n",
    "            'fontSize': '20px',\n",
    "            'textAlignLast': 'center'\n",
    "        }\n",
    "    ),\n",
    "    \n",
    "    \n",
    "    #making dropdown to select year\n",
    "    dcc.Dropdown(\n",
    "        id='select-year',\n",
    "        options=[{'label': i, 'value': i} for i in year_list],\n",
    "        placeholder='Select year',\n",
    "        value='Select-year',\n",
    "        style={\n",
    "            'width': '80%',\n",
    "            'padding': '3px',\n",
    "            'fontSize': '20px',\n",
    "            'textAlignLast': 'center'\n",
    "        }\n",
    "    ),\n",
    "    \n",
    "    html.Div([\n",
    "        html.Div(id='output-container', className='chart-grid', style={'display': 'flex'})\n",
    "    ])\n",
    "])\n",
    "\n",
    "#functions returned to create the plots\n",
    "def create_yearly_plot1(yearly_data):\n",
    "    \n",
    "    #creates line graph for sales over time\n",
    "    fig = px.line(yearly_data,\n",
    "                  x='Month',\n",
    "                  y='Automobile_Sales',\n",
    "                  title=f'Automobile Sales in {yearly_data[\"Year\"].iloc[0]}')\n",
    "    return fig\n",
    "\n",
    "\n",
    "def create_yearly_plot2(yearly_data):\n",
    "    \n",
    "    #creates bar chart for average sales by vehicle type\n",
    "    avg_sales = yearly_data.groupby('Vehicle_Type')['Automobile_Sales'].mean().reset_index()\n",
    "    fig = px.bar(avg_sales,\n",
    "                 x='Vehicle_Type',\n",
    "                 y='Automobile_Sales',\n",
    "                 title=f'Average Automobile Sales by Vehicle Type in {yearly_data[\"Year\"].iloc[0]}')\n",
    "    return fig\n",
    "\n",
    "\n",
    "def create_yearly_plot3(yearly_data):\n",
    "    \n",
    "    #pie chart for total expenses by vehicle type\n",
    "    total_sales = yearly_data.groupby('Vehicle_Type')['Automobile_Sales'].sum().reset_index()\n",
    "    fig = px.pie(total_sales,\n",
    "                 values='Automobile_Sales',\n",
    "                 names='Vehicle_Type',\n",
    "                 title=f'Total Sales Share by Vehicle Type in {yearly_data[\"Year\"].iloc[0]}')\n",
    "    return fig\n",
    "\n",
    "\n",
    "def create_yearly_plot4(yearly_data):\n",
    "    \n",
    "    #unemployement rate compared to sales by vehicle type\n",
    "    ad_exp_data = yearly_data.groupby('Vehicle_Type')['Advertising_Expenditure'].sum().reset_index()\n",
    "    fig = px.bar(ad_exp_data,\n",
    "                 x='Vehicle_Type',\n",
    "                 y='Advertising_Expenditure',\n",
    "                 title=f'Advertising Expenditure by Vehicle Type in {yearly_data[\"Year\"].iloc[0]}')\n",
    "    return fig\n",
    "\n",
    "#callback component\n",
    "@app.callback(\n",
    "    Output(component_id='output-container', component_property='children'),\n",
    "    [Input(component_id='dropdown-statistics', component_property='value'),\n",
    "     Input(component_id='select-year', component_property='value')]\n",
    ")\n",
    "\n",
    "#this is the output container that is showing the plots \n",
    "def update_output_container(selected_statistic, selected_year):\n",
    "    if selected_statistic == 'Recession Period Statistics':\n",
    "        # Filter the data for recession periods\n",
    "        recession_data = data[data['Recession'] == 1]\n",
    "\n",
    "        #first plot: line graph\n",
    "        yearly_rec = recession_data.groupby('Year')['Automobile_Sales'].mean().reset_index()\n",
    "        R_chart1 = dcc.Graph(\n",
    "            figure=px.line(yearly_rec,\n",
    "                           x='Year',\n",
    "                           y='Automobile_Sales',\n",
    "                           title=\"Automobile Sales Fluctuations Over Recession Period\")\n",
    "        )\n",
    "\n",
    "        #second plot: bar graph\n",
    "        average_sales = recession_data.groupby('Vehicle_Type')['Automobile_Sales'].mean().reset_index()\n",
    "        R_chart2 = dcc.Graph(\n",
    "            figure=px.bar(average_sales,\n",
    "                          x='Vehicle_Type',\n",
    "                          y='Automobile_Sales',\n",
    "                          title=\"Average Number of Vehicles Sold by Vehicle Type\")\n",
    "        )\n",
    "\n",
    "        #third plot: pie chart\n",
    "        exp_rec = recession_data.groupby('Vehicle_Type')['Advertising_Expenditure'].sum().reset_index()\n",
    "        R_chart3 = dcc.Graph(\n",
    "            figure=px.pie(exp_rec,\n",
    "                          values='Advertising_Expenditure',\n",
    "                          names='Vehicle_Type',\n",
    "                          title=\"Total Expenditure Share by Vehicle Type During Recessions\")\n",
    "        )\n",
    "\n",
    "        #fourth plot: line graph\n",
    "        unemp_data = recession_data.groupby(['unemployment_rate', 'Vehicle_Type'])['Automobile_Sales'].mean().reset_index()\n",
    "        R_chart4 = dcc.Graph(\n",
    "            figure=px.bar(unemp_data,\n",
    "                          x='unemployment_rate',\n",
    "                          y='Automobile_Sales',\n",
    "                          color='Vehicle_Type',\n",
    "                          labels={'unemployment_rate': 'Unemployment Rate', 'Automobile_Sales': 'Average Automobile Sales'},\n",
    "                          title='Effect of Unemployment Rate on Vehicle Type and Sales')\n",
    "        )\n",
    "\n",
    "        return [\n",
    "            html.Div(className='chart-item', children=[html.Div(children=R_chart1), html.Div(children=R_chart2)], style={'display': 'flex'}),\n",
    "            html.Div(className='chart-item', children=[html.Div(children=R_chart3), html.Div(children=R_chart4)], style={'display': 'flex'})\n",
    "        ]\n",
    "\n",
    "    elif selected_statistic == 'Yearly Statistics':\n",
    "        if selected_year and selected_year != 'Select-year':\n",
    "            yearly_data = data[data['Year'] == selected_year]\n",
    "\n",
    "            plots = [\n",
    "                dcc.Graph(figure=create_yearly_plot1(yearly_data)),\n",
    "                dcc.Graph(figure=create_yearly_plot2(yearly_data)),\n",
    "                dcc.Graph(figure=create_yearly_plot3(yearly_data)),\n",
    "                dcc.Graph(figure=create_yearly_plot4(yearly_data))\n",
    "            ]\n",
    "\n",
    "            return html.Div(children=plots, style={'display': 'grid', 'grid-template-columns': '1fr 1fr', 'gap': '20px'})\n",
    "\n",
    "        return html.Div([\n",
    "            html.H3('Please select a valid year to view yearly statistics.', style={'textAlign': 'center'})\n",
    "        ])\n",
    "\n",
    "    return html.Div([\n",
    "        html.H3('Please select a valid report type to view the statistics.', style={'textAlign': 'center'})\n",
    "    ])\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(port=8090, debug=True)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
